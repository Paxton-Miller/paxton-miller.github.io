<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue Composables - 组合式函数的应用</title>
    <link href="/2025/08/09/Vue-Composables-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2025/08/09/Vue-Composables-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Vue3 带来最大的革新莫过于选项式API (<code>Composition API</code>), 其中一大特性就是<code>组合式函数</code>。在 Vue 生态中，composables 一般翻译成 “组合式函数” 或 “可组合函数”, 意思是把一段逻辑（通常是响应式状态、计算属性、侦听器等）封装成一个独立的函数，这个函数可以在多个组件中复用, 也可以用于解耦臃肿的业务逻辑。</p><p><strong>作用：逻辑复用、代码组织更清晰，不依赖组件上下文</strong></p><h2 id="一个简单的组合式函数样例"><a href="#一个简单的组合式函数样例" class="headerlink" title="一个简单的组合式函数样例"></a>一个简单的组合式函数样例</h2><h3 id="创建-useGrid-ts-文件"><a href="#创建-useGrid-ts-文件" class="headerlink" title="创建 useGrid.ts 文件"></a>创建 useGrid.ts 文件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Grid</span> = &#123;<br>    <span class="hljs-attr">columnId</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">rowId</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">resolution</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> columnId = ref&lt;<span class="hljs-built_in">number</span>&gt;()<br>    <span class="hljs-keyword">const</span> rowId = ref&lt;<span class="hljs-built_in">number</span>&gt;()<br>    <span class="hljs-keyword">const</span> resolution = ref&lt;<span class="hljs-built_in">number</span>&gt;()<br>    <span class="hljs-keyword">const</span> selectedGrid = ref&lt;<span class="hljs-title class_">Grid</span>&gt;()<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getAllGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-comment">// 在这里封装具体的函数逻辑</span><br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        selectedGrid,<br>        getAllGrid<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在你的代码中应用"><a href="#在你的代码中应用" class="headerlink" title="在你的代码中应用"></a>在你的代码中应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        一个简单的组合式函数样例🚀<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>当前选中的格网：&#123;&#123; selectedGrid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useGrid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useGrid.ts&quot;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; selectedGrid, getAllGrid &#125; = <span class="hljs-title function_">useGrid</span>() <span class="hljs-comment">// 记住这种写法！对象解耦</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="等同于："><a href="#等同于：" class="headerlink" title="等同于："></a>等同于：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        一个简单的非组合式函数样例<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>当前选中的格网：&#123;&#123; selectedGrid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">type <span class="hljs-title class_">Grid</span> = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">columnId</span>: number,</span><br><span class="language-javascript">    <span class="hljs-attr">rowId</span>: number,</span><br><span class="language-javascript">    <span class="hljs-attr">resolution</span>: number</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> columnId = ref&lt;number&gt;()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> rowId = ref&lt;number&gt;()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> resolution = ref&lt;number&gt;()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> selectedGrid = ref&lt;<span class="hljs-title class_">Grid</span>&gt;()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getAllGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 在这里封装具体的函数逻辑</span></span><br><span class="language-javascript">    ...</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组合式函数的好处"><a href="#组合式函数的好处" class="headerlink" title="组合式函数的好处"></a>组合式函数的好处</h2><p>大家可以发现，组合式函数能够将你的业务逻辑从原本臃肿的代码中抽象解放出来！以便于逻辑复用，同时代码组织更加清晰，不依赖组件上下文</p><h2 id="组合式函数的“陷阱”"><a href="#组合式函数的“陷阱”" class="headerlink" title="组合式函数的“陷阱”"></a>组合式函数的“陷阱”</h2><h3 id="选项式-API-作用域范围混淆——案例1"><a href="#选项式-API-作用域范围混淆——案例1" class="headerlink" title="选项式 API 作用域范围混淆——案例1"></a>选项式 API 作用域范围混淆——案例1</h3><p>大家可以思考一下以下两种写法有什么不同？</p><ul><li>写法1</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// useGrid.ts</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 把响应式变量封装入组合式函数内部</span><br>    <span class="hljs-keyword">const</span> columnId = ref&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        columnId<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// test.ts</span><br><span class="hljs-keyword">import</span> &#123; useGrid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useGrid.ts&quot;</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdA &#125; = <span class="hljs-title function_">useGrid</span>() <span class="hljs-comment">// :相当于以columnIdA的变量名引入columnId</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdB &#125; = <span class="hljs-title function_">useGrid</span>()<br><br>columnIdA.<span class="hljs-property">value</span> ++<br>columnIdB.<span class="hljs-property">value</span> ++<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdA.<span class="hljs-property">value</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdB.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br>1<br></code></pre></td></tr></table></figure><ul><li>写法2</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// useGrid.ts</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><br><span class="hljs-keyword">const</span> columnId = ref&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        columId<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// test.ts</span><br><span class="hljs-keyword">import</span> &#123; useGrid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useGrid.ts&quot;</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdA &#125; = <span class="hljs-title function_">useGrid</span>() <span class="hljs-comment">// :相当于以columnIdA的变量名引入columnId</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdB &#125; = <span class="hljs-title function_">useGrid</span>()<br><br>columnIdA.<span class="hljs-property">value</span> ++<br>columnIdB.<span class="hljs-property">value</span> ++<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdA.<span class="hljs-property">value</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdB.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br>2<br></code></pre></td></tr></table></figure><p>为什么会造成这种差异呢？</p><p>因为写法1把columnId这个响应式变量作为了组合函数封装的一部分，而写法2则把columnId作为了全局变量。在写法1的情况下，利用useGrid声明的两个响应式变量是双胞胎兄弟，它们本质上是不同的个体！而写法2虽然也声明了两个响应式变量，但本质上两个响应式变量指向的是同一个变量。</p><p>这两种做法各有什么实际用处呢？</p><p>写法1更适用于“逻辑复用”，在不同的地方声明useGrid，也即在不同的业务场景应用组合式函数，他们需要的是独立的响应式变量，不需要共享给其他组件。<br>而写法2更适用于“共享”，在不同的地方声明useGrid，它们可以拿到同一份响应式变量，需要的是能在不同的业务场景中共享一份数据。</p><h3 id="选项式API作用域范围混淆——案例2"><a href="#选项式API作用域范围混淆——案例2" class="headerlink" title="选项式API作用域范围混淆——案例2"></a>选项式API作用域范围混淆——案例2</h3><p>前情提要：useI18n是一个只能作用于选项式API范围内的组合式函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// useA.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useA</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; t &#125; = <span class="hljs-title function_">useI18n</span>()<br>    ...<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//useB.ts</span><br><span class="hljs-keyword">import</span> &#123; useA &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useA.ts&#x27;</span><br><span class="hljs-keyword">const</span> &#123; ... &#125; = <span class="hljs-title function_">useA</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useB</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>vue组件测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useB &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useB.ts&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; ... &#125; = <span class="hljs-title function_">useB</span>()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是另一种作用域混淆错误，因为useA中useI18n只能在选项式API内声明，而useB中却在组合式函数外部声明useA，这本质上脱离了选项式API的作用域，故vue组件就会报错useI18n必须在选项式API内部声明。</p><h3 id="注意规避循环依赖"><a href="#注意规避循环依赖" class="headerlink" title="注意规避循环依赖"></a>注意规避循环依赖</h3><p>有的时候我们喜欢混用各个组合式函数，组合式函数之间可能存在相互引用的变量，就会造成循环依赖，故在设计时就要将各个模块解耦开，另外推荐一种笔者推荐的写法，可以有效避免循环依赖：</p><h3 id="笔者推荐的写法"><a href="#笔者推荐的写法" class="headerlink" title="笔者推荐的写法"></a>笔者推荐的写法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建 shared.ts</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> commonVar = ref&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// useA.ts</span><br><span class="hljs-keyword">import</span> &#123; commonVar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./shared.ts&#x27;</span><br>... <span class="hljs-comment">// 使用commonVar</span><br><span class="hljs-comment">// useB.ts</span><br><span class="hljs-keyword">import</span> &#123; commonVar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./shared.ts&#x27;</span><br>... <span class="hljs-comment">// 使用commonVar</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/03/hello-world/"/>
    <url>/2025/08/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
