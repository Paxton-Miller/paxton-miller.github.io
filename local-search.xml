<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MinIO 分布式部署（Kubernetes）</title>
    <link href="/2025/09/05/MinIO-%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%EF%BC%88Kubernetes%EF%BC%89/"/>
    <url>/2025/09/05/MinIO-%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%EF%BC%88Kubernetes%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul><li><a href="#%E9%83%A8%E7%BD%B2%E5%89%8D%E5%87%86%E5%A4%87">部署前准备</a></li><li><a href="#kubernetes-%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84">Kubernetes 部署架构</a></li><li><a href="#yaml-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">YAML 配置文件详解</a></li><li><a href="#%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4">部署步骤</a></li><li><a href="#docker-vs-kubernetes-%E5%AF%B9%E6%AF%94">Docker vs Kubernetes 对比</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">常见问题与注意事项</a></li><li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li></ul><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><h3 id="检查存储类"><a href="#检查存储类" class="headerlink" title="检查存储类"></a>检查存储类</h3><p>在开始部署之前，确保你的 Kubernetes 集群有可用的存储类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get storageclass<br></code></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>重要</strong>：如果没有默认的存储类，PVC 将无法绑定，导致 Pod 启动失败</p></blockquote><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>Kubernetes 集群（建议 1.20+）</li><li>可用的存储类（如 NFS、Ceph 等）</li><li>至少 4 个节点以获得最佳性能</li><li>足够的存储空间（建议每个节点 5GB+）</li></ul><h2 id="Kubernetes-部署架构"><a href="#Kubernetes-部署架构" class="headerlink" title="Kubernetes 部署架构"></a>Kubernetes 部署架构</h2><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><table><thead><tr><th>组件</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td><strong>StatefulSet</strong></td><td>管理有状态 Pod</td><td>固定网络身份、有序部署</td></tr><tr><td><strong>Headless Service</strong></td><td>Pod 间服务发现</td><td>无 ClusterIP，提供 DNS 解析</td></tr><tr><td><strong>NodePort Service</strong></td><td>对外暴露服务</td><td>通过节点端口访问</td></tr><tr><td><strong>PVC</strong></td><td>持久化存储</td><td>自动绑定，数据持久化</td></tr></tbody></table><h2 id="YAML-配置文件详解"><a href="#YAML-配置文件详解" class="headerlink" title="YAML 配置文件详解"></a>YAML 配置文件详解</h2><h3 id="1️⃣-Headless-Service"><a href="#1️⃣-Headless-Service" class="headerlink" title="1️⃣ Headless Service"></a>1️⃣ Headless Service</h3><p><strong>作用</strong>：为 StatefulSet 提供固定域名解析，实现 Pod 间服务发现</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">minio-hl-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">satellite-micro</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-string">None</span>   <span class="hljs-comment"># 关键：Headless Service</span><br>  <span class="hljs-attr">publishNotReadyAddresses:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">minio</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">api</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9000</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">console</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9001</span><br></code></pre></td></tr></table></figure><p><strong>关键配置说明</strong>：</p><ul><li><code>clusterIP: None</code>：创建 Headless Service</li><li><code>publishNotReadyAddresses: true</code>：即使 Pod 未就绪也发布地址</li></ul><h3 id="2️⃣-NodePort-Service"><a href="#2️⃣-NodePort-Service" class="headerlink" title="2️⃣ NodePort Service"></a>2️⃣ NodePort Service</h3><p><strong>作用</strong>：对外暴露 MinIO 服务，提供外部访问入口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">minio-svc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">satellite-micro</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">minio</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">api</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9000</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30900</span>   <span class="hljs-comment"># 自定义节点端口</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">console</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9001</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30901</span>   <span class="hljs-comment"># 自定义节点端口</span><br></code></pre></td></tr></table></figure><p><strong>端口映射</strong>：</p><ul><li><code>30900</code>：MinIO API 接口</li><li><code>30901</code>：MinIO 管理控制台</li></ul><h3 id="3️⃣-StatefulSet"><a href="#3️⃣-StatefulSet" class="headerlink" title="3️⃣ StatefulSet"></a>3️⃣ StatefulSet</h3><p><strong>作用</strong>：管理 MinIO Pod 和 PVC，确保有状态服务的稳定性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StatefulSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">minio</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">satellite-micro</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">serviceName:</span> <span class="hljs-string">minio-hl-svc</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">4</span>  <span class="hljs-comment"># 四个节点</span><br>  <span class="hljs-attr">podManagementPolicy:</span> <span class="hljs-string">Parallel</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">minio</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">minio</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">fsGroup:</span> <span class="hljs-number">1000</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAntiAffinity:</span>   <span class="hljs-comment"># 尽量把 Pod 分散到不同节点</span><br>          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>              <span class="hljs-attr">podAffinityTerm:</span><br>                <span class="hljs-attr">labelSelector:</span><br>                  <span class="hljs-attr">matchExpressions:</span><br>                    <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">app</span><br>                      <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                      <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;minio&quot;</span>]<br>                <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">minio</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">223.2</span><span class="hljs-number">.44</span><span class="hljs-number">.251</span><span class="hljs-string">/satellite/minio:latest</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">args:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">server</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--address=:9000</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">--console-address=:9001</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">http://minio-&#123;0...3&#125;.minio-hl-svc.satellite-micro.svc.cluster.local:9000/data</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MINIO_ROOT_USER</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;minioadmin&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MINIO_ROOT_PASSWORD</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;minioadmin&quot;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">api</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9000</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">console</span><br>              <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9001</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>              <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span><br>          <span class="hljs-attr">readinessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/minio/health/ready</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">20</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br>          <span class="hljs-attr">livenessProbe:</span><br>            <span class="hljs-attr">httpGet:</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">/minio/health/live</span><br>              <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br>            <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">120</span><br>            <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">volumeClaimTemplates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">metadata:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>      <span class="hljs-attr">spec:</span><br>        <span class="hljs-attr">accessModes:</span> [<span class="hljs-string">&quot;ReadWriteOnce&quot;</span>]<br>        <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">nfs-client</span>   <span class="hljs-comment"># 使用你的存储类</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">storage:</span> <span class="hljs-string">5Gi</span><br></code></pre></td></tr></table></figure><h3 id="关键配置解析"><a href="#关键配置解析" class="headerlink" title="关键配置解析"></a>关键配置解析</h3><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 分布式节点地址（0-3 顺序不要随意改）</span><br><span class="hljs-string">http://minio-&#123;0...3&#125;.minio-hl-svc.satellite-micro.svc.cluster.local:9000/data</span><br></code></pre></td></tr></table></figure><h4 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h4><ul><li><strong>就绪探针</strong>：检查服务是否准备好接收流量</li><li><strong>存活探针</strong>：检查服务是否正常运行</li></ul><h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><ul><li><strong>PVC 模板</strong>：自动为每个 Pod 创建独立的存储卷</li><li><strong>存储类</strong>：根据你的集群环境选择合适的存储类</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><h3 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h3><p>将上述 YAML 内容分别保存为：</p><ul><li><code>01-minio-headless-svc.yaml</code></li><li><code>02-minio-svc.yaml</code></li><li><code>03-minio-statefulset.yaml</code></li></ul><h3 id="2-按顺序部署"><a href="#2-按顺序部署" class="headerlink" title="2. 按顺序部署"></a>2. 按顺序部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建 Headless Service</span><br>kubectl apply -f 01-minio-headless-svc.yaml<br><br><span class="hljs-comment"># 2. 创建 NodePort Service</span><br>kubectl apply -f 02-minio-svc.yaml<br><br><span class="hljs-comment"># 3. 创建 StatefulSet</span><br>kubectl apply -f 03-minio-statefulset.yaml<br></code></pre></td></tr></table></figure><h3 id="3-验证部署"><a href="#3-验证部署" class="headerlink" title="3. 验证部署"></a>3. 验证部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查 Pod 状态</span><br>kubectl get pods -n satellite-micro<br><br><span class="hljs-comment"># 检查 Service</span><br>kubectl get svc -n satellite-micro<br><br><span class="hljs-comment"># 检查 PVC</span><br>kubectl get pvc -n satellite-micro<br><br><span class="hljs-comment"># 查看 Pod 日志</span><br>kubectl logs -f minio-0 -n satellite-micro<br></code></pre></td></tr></table></figure><h3 id="4-访问服务"><a href="#4-访问服务" class="headerlink" title="4. 访问服务"></a>4. 访问服务</h3><p>部署完成后，通过以下方式访问：</p><ul><li><strong>API 接口</strong>：<code>http://your-node-ip:30900</code></li><li><strong>管理控制台</strong>：<code>http://your-node-ip:30901</code></li></ul><h2 id="Docker-vs-Kubernetes-对比"><a href="#Docker-vs-Kubernetes-对比" class="headerlink" title="Docker vs Kubernetes 对比"></a>Docker vs Kubernetes 对比</h2><h3 id="1️⃣-Docker-分布式模式"><a href="#1️⃣-Docker-分布式模式" class="headerlink" title="1️⃣ Docker 分布式模式"></a>1️⃣ Docker 分布式模式</h3><p><strong>特点</strong>：需要手动配置网络和存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要手动配置 hosts 文件</span><br>minio-0 10.0.0.1<br>minio-1 10.0.0.2<br>minio-2 10.0.0.3<br>minio-3 10.0.0.4<br><br><span class="hljs-comment"># 启动命令</span><br>minio server http://minio-0/data http://minio-1/data http://minio-2/data http://minio-3/data<br></code></pre></td></tr></table></figure><p><strong>缺点</strong>：</p><ul><li>需要手动管理网络配置</li><li>存储管理复杂</li><li>扩缩容困难</li><li>缺乏自动故障恢复</li></ul><h3 id="2️⃣-Kubernetes-StatefulSet-模式"><a href="#2️⃣-Kubernetes-StatefulSet-模式" class="headerlink" title="2️⃣ Kubernetes StatefulSet 模式"></a>2️⃣ Kubernetes StatefulSet 模式</h3><p><strong>特点</strong>：自动化管理，高可用性</p><h4 id="自动服务发现"><a href="#自动服务发现" class="headerlink" title="自动服务发现"></a>自动服务发现</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Pod 固定命名</span><br><span class="hljs-string">minio-0,</span> <span class="hljs-string">minio-1,</span> <span class="hljs-string">minio-2,</span> <span class="hljs-string">minio-3</span><br><br><span class="hljs-comment"># DNS 自动解析</span><br><span class="hljs-string">minio-0.minio-hl-svc.satellite-micro.svc.cluster.local</span><br><span class="hljs-string">minio-1.minio-hl-svc.satellite-micro.svc.cluster.local</span><br><span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h4 id="优势对比"><a href="#优势对比" class="headerlink" title="优势对比"></a>优势对比</h4><table><thead><tr><th>特性</th><th>Docker</th><th>Kubernetes</th></tr></thead><tbody><tr><td><strong>服务发现</strong></td><td>手动配置 hosts</td><td>DNS 自动解析</td></tr><tr><td><strong>存储管理</strong></td><td>手动挂载</td><td>PVC 自动绑定</td></tr><tr><td><strong>扩缩容</strong></td><td>复杂</td><td>简单（修改 replicas）</td></tr><tr><td><strong>故障恢复</strong></td><td>手动处理</td><td>自动重启</td></tr><tr><td><strong>负载均衡</strong></td><td>需要 Nginx</td><td>Service 自动处理</td></tr><tr><td><strong>监控</strong></td><td>需要额外工具</td><td>原生支持</td></tr></tbody></table><h2 id="常见问题与注意事项"><a href="#常见问题与注意事项" class="headerlink" title="常见问题与注意事项"></a>常见问题与注意事项</h2><h3 id="⚠️-重要提醒"><a href="#⚠️-重要提醒" class="headerlink" title="⚠️ 重要提醒"></a>⚠️ 重要提醒</h3><ol><li><strong>节点顺序</strong>：<code>minio-&#123;0...3&#125;</code> 中的 0-3 顺序不要随意改动</li><li><strong>存储类</strong>：确保 <code>storageClassName</code> 与你的集群环境匹配</li><li><strong>命名空间</strong>：所有资源必须在同一个命名空间中</li><li><strong>网络策略</strong>：确保 Pod 间网络通信正常</li></ol><h3 id="🔧-故障排查"><a href="#🔧-故障排查" class="headerlink" title="🔧 故障排查"></a>🔧 故障排查</h3><h4 id="Pod-启动失败"><a href="#Pod-启动失败" class="headerlink" title="Pod 启动失败"></a>Pod 启动失败</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查 Pod 状态</span><br>kubectl describe pod minio-0 -n satellite-micro<br><br><span class="hljs-comment"># 查看事件</span><br>kubectl get events -n satellite-micro --sort-by=<span class="hljs-string">&#x27;.lastTimestamp&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="PVC-绑定失败"><a href="#PVC-绑定失败" class="headerlink" title="PVC 绑定失败"></a>PVC 绑定失败</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查存储类</span><br>kubectl get storageclass<br><br><span class="hljs-comment"># 检查 PVC 状态</span><br>kubectl describe pvc data-minio-0 -n satellite-micro<br></code></pre></td></tr></table></figure><h4 id="网络连接问题"><a href="#网络连接问题" class="headerlink" title="网络连接问题"></a>网络连接问题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试 Pod 间网络</span><br>kubectl <span class="hljs-built_in">exec</span> -it minio-0 -n satellite-micro -- nslookup minio-1.minio-hl-svc.satellite-micro.svc.cluster.local<br></code></pre></td></tr></table></figure><h3 id="📊-性能优化建议"><a href="#📊-性能优化建议" class="headerlink" title="📊 性能优化建议"></a>📊 性能优化建议</h3><ol><li><strong>节点分布</strong>：使用 <code>podAntiAffinity</code> 确保 Pod 分布在不同节点</li><li><strong>存储优化</strong>：根据 I&#x2F;O 需求选择合适的存储类</li><li><strong>资源限制</strong>：为容器设置合适的 CPU 和内存限制</li><li><strong>网络优化</strong>：使用 CNI 插件优化网络性能</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/Leonardo-li/p/18743772">k8s离线部署minio集群</a></li><li><a href="https://cloud.tencent.com/developer/article/2246499">kubernetes安装minio集群</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MinIO</tag>
      
      <tag>分布式</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MinIO 分布式部署（Docker）</title>
    <link href="/2025/09/05/MinIO-%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%EF%BC%88Docker%EF%BC%89/"/>
    <url>/2025/09/05/MinIO-%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%EF%BC%88Docker%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2">为什么选择分布式部署？</a></li><li><a href="#%E9%83%A8%E7%BD%B2%E5%89%8D%E5%87%86%E5%A4%87">部署前准备</a></li><li><a href="#minio-%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2">MinIO 分布式容器化部署</a></li><li><a href="#nginx-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE">Nginx 负载均衡配置</a></li><li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li></ul><h2 id="为什么选择分布式部署？"><a href="#为什么选择分布式部署？" class="headerlink" title="为什么选择分布式部署？"></a>为什么选择分布式部署？</h2><p>MinIO 单体应用并不能发挥 MinIO 自带分布式存储的优势：</p><ul><li>✅ <strong>数据容灾</strong>：多节点备份，防止数据丢失</li><li>✅ <strong>负载均衡</strong>：分散请求压力，提高性能</li><li>✅ <strong>高可用性</strong>：避免单点故障，确保服务稳定运行</li></ul><blockquote><p>⚠️ <strong>注意</strong>：单节点部署难免会出现单点故障，无法做到服务的高可用</p></blockquote><h2 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><ul><li>MinIO 官方建议采用 <strong>Kubernetes</strong> 部署</li><li>确保所有节点的 <strong>MinIO 版本一致</strong></li><li>建议使用 4 个或更多节点以获得最佳性能</li></ul><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-获取节点-IP-地址"><a href="#1-获取节点-IP-地址" class="headerlink" title="1. 获取节点 IP 地址"></a>1. 获取节点 IP 地址</h4><p>在每个节点上执行以下命令获取内网 IP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><blockquote><p>💡 <strong>提示</strong>：阿里云服务器请勿采用公网 IP，使用内网 IP 更安全且性能更好</p></blockquote><h4 id="2-配置主机名解析"><a href="#2-配置主机名解析" class="headerlink" title="2. 配置主机名解析"></a>2. 配置主机名解析</h4><p>在每个节点的 <code>/etc/hosts</code> 文件中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">172.17.117.117 minio-1  <br>172.17.117.118 minio-2  <br>172.17.117.119 minio-3  <br>172.17.117.120 minio-4<br></code></pre></td></tr></table></figure><h4 id="3-测试网络连通性"><a href="#3-测试网络连通性" class="headerlink" title="3. 测试网络连通性"></a>3. 测试网络连通性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping minio-1<br>ping minio-2<br>ping minio-3<br>ping minio-4<br></code></pre></td></tr></table></figure><h2 id="MinIO-分布式容器化部署"><a href="#MinIO-分布式容器化部署" class="headerlink" title="MinIO 分布式容器化部署"></a>MinIO 分布式容器化部署</h2><h3 id="启动-MinIO-容器"><a href="#启动-MinIO-容器" class="headerlink" title="启动 MinIO 容器"></a>启动 MinIO 容器</h3><p>在每个节点上运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name minio --net=host --restart=always --privileged=<span class="hljs-literal">true</span> -v /mnt/minio/data:/data -e MINIO_ROOT_USER=OGMS -e MINIO_ROOT_PASSWORD=ogms250410 minio/minio:latest server http://minio-&#123;1...4&#125;/data --console-address <span class="hljs-string">&quot;0.0.0.0:9101&quot;</span> --address <span class="hljs-string">&quot;0.0.0.0:9100&quot;</span><br></code></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--net=host</code></td><td>共享宿主机网络命名空间</td></tr><tr><td><code>--restart=always</code></td><td>容器自动重启</td></tr><tr><td><code>--privileged=true</code></td><td>给予容器特权模式</td></tr><tr><td><code>-v /mnt/minio/data:/data</code></td><td>数据持久化挂载</td></tr><tr><td><code>MINIO_ROOT_USER</code></td><td>MinIO 管理员用户名</td></tr><tr><td><code>MINIO_ROOT_PASSWORD</code></td><td>MinIO 管理员密码</td></tr><tr><td><code>--console-address</code></td><td>控制台访问地址</td></tr><tr><td><code>--address</code></td><td>API 访问地址</td></tr></tbody></table><h3 id="检查容器状态"><a href="#检查容器状态" class="headerlink" title="检查容器状态"></a>检查容器状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs minio<br></code></pre></td></tr></table></figure><h2 id="Nginx-负载均衡配置"><a href="#Nginx-负载均衡配置" class="headerlink" title="Nginx 负载均衡配置"></a>Nginx 负载均衡配置</h2><h3 id="启动-Nginx-容器"><a href="#启动-Nginx-容器" class="headerlink" title="启动 Nginx 容器"></a>启动 Nginx 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name minio_nginx --net=host -p 9000:9000 -p 9001:9001 -v /mnt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf --restart=always --privileged=<span class="hljs-literal">true</span> nginx:latest<br><br><span class="hljs-comment"># 或者使用 ARM 版本</span><br><span class="hljs-comment"># nginx:alpine-arm</span><br></code></pre></td></tr></table></figure><h3 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h3><p>创建 <code>/mnt/nginx/conf/nginx.conf</code> 文件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">worker_processes</span> auto;  <br><br><span class="hljs-section">events</span> &#123;  <br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;  <br>&#125;  <br><br><span class="hljs-section">http</span> &#123;  <br>    <span class="hljs-comment"># API 负载均衡  </span><br>    <span class="hljs-section">upstream</span> minio_api &#123;  <br>        ip_hash;   <span class="hljs-comment"># 使用 ip_hash，保证同一个客户端尽量落到同一节点，避免会话不一致  </span><br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">1</span>:<span class="hljs-number">9100</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">2</span>:<span class="hljs-number">9100</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">3</span>:<span class="hljs-number">9100</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">4</span>:<span class="hljs-number">9100</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">30s</span>;  <br>    &#125;  <br><br>    <span class="hljs-comment"># 控制台负载均衡  </span><br>    <span class="hljs-section">upstream</span> minio_console &#123;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">1</span>:<span class="hljs-number">9101</span>;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">2</span>:<span class="hljs-number">9101</span>;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">3</span>:<span class="hljs-number">9101</span>;  <br>        <span class="hljs-attribute">server</span> minio-<span class="hljs-number">4</span>:<span class="hljs-number">9101</span>;  <br>    &#125;  <br><br>    <span class="hljs-comment"># MinIO API 服务</span><br>    <span class="hljs-section">server</span> &#123;  <br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">9000</span>;  <br>        <span class="hljs-attribute">server_name</span> _;  <br><br>        <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">0</span>;  <br>        <span class="hljs-attribute">proxy_buffering</span> <span class="hljs-literal">off</span>;  <br>        <span class="hljs-attribute">ignore_invalid_headers</span> <span class="hljs-literal">off</span>;  <br><br>        <span class="hljs-section">location</span> / &#123;  <br>            <span class="hljs-attribute">proxy_set_header</span> Host              <span class="hljs-variable">$http_host</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP         <span class="hljs-variable">$remote_addr</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For   <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;  <br><br>            <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">300</span>;  <br>            <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;  <br>            <span class="hljs-attribute">chunked_transfer_encoding</span> <span class="hljs-literal">off</span>;  <br>            <span class="hljs-attribute">proxy_ignore_client_abort</span> <span class="hljs-literal">on</span>;  <br><br>            <span class="hljs-attribute">proxy_pass</span> http://minio_api;  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-comment"># MinIO Console 服务</span><br>    <span class="hljs-section">server</span> &#123;  <br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">9001</span>;  <br>        <span class="hljs-attribute">server_name</span> _;  <br><br>        <span class="hljs-section">location</span> / &#123;  <br>            <span class="hljs-attribute">proxy_set_header</span> Host              <span class="hljs-variable">$http_host</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP         <span class="hljs-variable">$remote_addr</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For   <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;  <br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;  <br><br>            <span class="hljs-attribute">proxy_pass</span> http://minio_console;  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><ul><li><strong>API 服务</strong>：使用 <code>ip_hash</code> 策略，确保同一客户端请求路由到同一节点</li><li><strong>控制台服务</strong>：使用轮询策略，分散访问压力</li></ul><h4 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h4><table><thead><tr><th>服务</th><th>端口</th><th>说明</th></tr></thead><tbody><tr><td>MinIO API</td><td>9000</td><td>对象存储 API 接口</td></tr><tr><td>MinIO Console</td><td>9001</td><td>Web 管理控制台</td></tr></tbody></table><h2 id="🎯-部署完成"><a href="#🎯-部署完成" class="headerlink" title="🎯 部署完成"></a>🎯 部署完成</h2><p>部署完成后，你可以通过以下方式访问：</p><ul><li><strong>API 接口</strong>：<code>http://your-server:9000</code></li><li><strong>管理控制台</strong>：<code>http://your-server:9001</code></li></ul><p>使用配置的用户名和密码登录管理控制台，开始使用 MinIO 分布式存储服务！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/sunxun001/p/17420785.html">MinIO 分布式部署实践</a></li><li><a href="https://www.cnblogs.com/masonlee/p/12811784.html">MinIO 集群部署指南</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>MinIO</tag>
      
      <tag>Docker</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue Composables - 组合式函数的应用</title>
    <link href="/2025/08/09/Vue-Composables-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2025/08/09/Vue-Composables-%E7%BB%84%E5%90%88%E5%BC%8F%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Vue3 带来最大的革新莫过于选项式API (<code>Composition API</code>), 其中一大特性就是<code>组合式函数</code>。在 Vue 生态中，composables 一般翻译成 “组合式函数” 或 “可组合函数”, 意思是把一段逻辑（通常是响应式状态、计算属性、侦听器等）封装成一个独立的函数，这个函数可以在多个组件中复用, 也可以用于解耦臃肿的业务逻辑。</p><p><strong>作用：逻辑复用、代码组织更清晰，不依赖组件上下文</strong></p><h2 id="一个简单的组合式函数样例"><a href="#一个简单的组合式函数样例" class="headerlink" title="一个简单的组合式函数样例"></a>一个简单的组合式函数样例</h2><h3 id="创建-useGrid-ts-文件"><a href="#创建-useGrid-ts-文件" class="headerlink" title="创建 useGrid.ts 文件"></a>创建 useGrid.ts 文件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Grid</span> = &#123;<br>    <span class="hljs-attr">columnId</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">rowId</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-attr">resolution</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> columnId = ref&lt;<span class="hljs-built_in">number</span>&gt;()<br>    <span class="hljs-keyword">const</span> rowId = ref&lt;<span class="hljs-built_in">number</span>&gt;()<br>    <span class="hljs-keyword">const</span> resolution = ref&lt;<span class="hljs-built_in">number</span>&gt;()<br>    <span class="hljs-keyword">const</span> selectedGrid = ref&lt;<span class="hljs-title class_">Grid</span>&gt;()<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getAllGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-comment">// 在这里封装具体的函数逻辑</span><br>        ...<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        selectedGrid,<br>        getAllGrid<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在你的代码中应用"><a href="#在你的代码中应用" class="headerlink" title="在你的代码中应用"></a>在你的代码中应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        一个简单的组合式函数样例🚀<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>当前选中的格网：&#123;&#123; selectedGrid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useGrid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useGrid.ts&quot;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; selectedGrid, getAllGrid &#125; = <span class="hljs-title function_">useGrid</span>() <span class="hljs-comment">// 记住这种写法！对象解耦</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="等同于："><a href="#等同于：" class="headerlink" title="等同于："></a>等同于：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        一个简单的非组合式函数样例<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>当前选中的格网：&#123;&#123; selectedGrid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">type <span class="hljs-title class_">Grid</span> = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">columnId</span>: number,</span><br><span class="language-javascript">    <span class="hljs-attr">rowId</span>: number,</span><br><span class="language-javascript">    <span class="hljs-attr">resolution</span>: number</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> columnId = ref&lt;number&gt;()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> rowId = ref&lt;number&gt;()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> resolution = ref&lt;number&gt;()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> selectedGrid = ref&lt;<span class="hljs-title class_">Grid</span>&gt;()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getAllGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">// 在这里封装具体的函数逻辑</span></span><br><span class="language-javascript">    ...</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组合式函数的好处"><a href="#组合式函数的好处" class="headerlink" title="组合式函数的好处"></a>组合式函数的好处</h2><p>大家可以发现，组合式函数能够将你的业务逻辑从原本臃肿的代码中抽象解放出来！以便于逻辑复用，同时代码组织更加清晰，不依赖组件上下文</p><h2 id="组合式函数的“陷阱”"><a href="#组合式函数的“陷阱”" class="headerlink" title="组合式函数的“陷阱”"></a>组合式函数的“陷阱”</h2><h3 id="选项式-API-作用域范围混淆——案例1"><a href="#选项式-API-作用域范围混淆——案例1" class="headerlink" title="选项式 API 作用域范围混淆——案例1"></a>选项式 API 作用域范围混淆——案例1</h3><p>大家可以思考一下以下两种写法有什么不同？</p><ul><li>写法1</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// useGrid.ts</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 把响应式变量封装入组合式函数内部</span><br>    <span class="hljs-keyword">const</span> columnId = ref&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        columnId<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// test.ts</span><br><span class="hljs-keyword">import</span> &#123; useGrid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useGrid.ts&quot;</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdA &#125; = <span class="hljs-title function_">useGrid</span>() <span class="hljs-comment">// :相当于以columnIdA的变量名引入columnId</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdB &#125; = <span class="hljs-title function_">useGrid</span>()<br><br>columnIdA.<span class="hljs-property">value</span> ++<br>columnIdB.<span class="hljs-property">value</span> ++<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdA.<span class="hljs-property">value</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdB.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br>1<br></code></pre></td></tr></table></figure><ul><li>写法2</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// useGrid.ts</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><br><span class="hljs-keyword">const</span> columnId = ref&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useGrid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        columId<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// test.ts</span><br><span class="hljs-keyword">import</span> &#123; useGrid &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./useGrid.ts&quot;</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdA &#125; = <span class="hljs-title function_">useGrid</span>() <span class="hljs-comment">// :相当于以columnIdA的变量名引入columnId</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">columnId</span>: columnIdB &#125; = <span class="hljs-title function_">useGrid</span>()<br><br>columnIdA.<span class="hljs-property">value</span> ++<br>columnIdB.<span class="hljs-property">value</span> ++<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdA.<span class="hljs-property">value</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(columnIdB.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br>2<br></code></pre></td></tr></table></figure><p>为什么会造成这种差异呢？</p><p>因为写法1把columnId这个响应式变量作为了组合函数封装的一部分，而写法2则把columnId作为了全局变量。在写法1的情况下，利用useGrid声明的两个响应式变量是双胞胎兄弟，它们本质上是不同的个体！而写法2虽然也声明了两个响应式变量，但本质上两个响应式变量指向的是同一个变量。</p><p>这两种做法各有什么实际用处呢？</p><p>写法1更适用于“逻辑复用”，在不同的地方声明useGrid，也即在不同的业务场景应用组合式函数，他们需要的是独立的响应式变量，不需要共享给其他组件。<br>而写法2更适用于“共享”，在不同的地方声明useGrid，它们可以拿到同一份响应式变量，需要的是能在不同的业务场景中共享一份数据。</p><h3 id="选项式API作用域范围混淆——案例2"><a href="#选项式API作用域范围混淆——案例2" class="headerlink" title="选项式API作用域范围混淆——案例2"></a>选项式API作用域范围混淆——案例2</h3><p>前情提要：useI18n是一个只能作用于选项式API范围内的组合式函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// useA.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useA</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> &#123; t &#125; = <span class="hljs-title function_">useI18n</span>()<br>    ...<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//useB.ts</span><br><span class="hljs-keyword">import</span> &#123; useA &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useA.ts&#x27;</span><br><span class="hljs-keyword">const</span> &#123; ... &#125; = <span class="hljs-title function_">useA</span>()<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useB</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>vue组件测试</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; useB &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./useB.ts&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> &#123; ... &#125; = <span class="hljs-title function_">useB</span>()</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这是另一种作用域混淆错误，因为useA中useI18n只能在选项式API内声明，而useB中却在组合式函数外部声明useA，这本质上脱离了选项式API的作用域，故vue组件就会报错useI18n必须在选项式API内部声明。</p><h3 id="注意规避循环依赖"><a href="#注意规避循环依赖" class="headerlink" title="注意规避循环依赖"></a>注意规避循环依赖</h3><p>有的时候我们喜欢混用各个组合式函数，组合式函数之间可能存在相互引用的变量，就会造成循环依赖，故在设计时就要将各个模块解耦开，另外推荐一种笔者推荐的写法，可以有效避免循环依赖：</p><h3 id="笔者推荐的写法"><a href="#笔者推荐的写法" class="headerlink" title="笔者推荐的写法"></a>笔者推荐的写法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 创建 shared.ts</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> commonVar = ref&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// useA.ts</span><br><span class="hljs-keyword">import</span> &#123; commonVar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./shared.ts&#x27;</span><br>... <span class="hljs-comment">// 使用commonVar</span><br><span class="hljs-comment">// useB.ts</span><br><span class="hljs-keyword">import</span> &#123; commonVar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./shared.ts&#x27;</span><br>... <span class="hljs-comment">// 使用commonVar</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/03/hello-world/"/>
    <url>/2025/08/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
